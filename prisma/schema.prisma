// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  clerkId    String?     @unique // Clerk-Benutzer-ID
  email      String?     @unique // Prisma setzt automatisch TEXT
  name       String? // TEXT f√ºr den Namen
  challenges Challenge[] // Relation zu Challenges
  images     Image[] // Relation zu Images
  updates    Update[] // <-- NEU: Relation zu Updates
}

model Challenge {
  id           Int       @id @default(autoincrement())
  title        String // TEXT f√ºr den Titel
  category     String? // Optionaler TEXT
  difficulty   String? // Optionaler Schwierigkeitsgrad
  description  String? // Feld f√ºr die Beschreibung
  duration     Int? // Integer f√ºr die Dauer
  completed    Boolean?  @default(false) // Standardwert ist false
  author       User      @relation(fields: [authorId], references: [id]) // Relation zu User
  authorId     Int // Fremdschl√ºssel
  progress     Float? // Fortschritt als Float-Wert
  age          Int? // Alter
  gender       String?
  created_at   DateTime? @default(now())
  updated_at   DateTime? @updatedAt
  edited_at    DateTime? // üëà explizit manuell setzen bei manuellen Edits
  city_address String?
  goal         String?
  images       Image[] // Relation zu Images
  updates      Update[] // <-- NEU: Gegenst√ºck der Relation
}

model Image {
  id          Int       @id @default(autoincrement())
  url         String
  description String?
  duration    Int
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt

  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId Int

  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?

  update      Update?   @relation(fields: [updateId], references: [id], onDelete: Cascade) // ‚úÖ richtiger Bezug
  updateId    Int?      // Bild geh√∂rt zu EINEM Update
}


model Update {
  id          Int        @id @default(autoincrement())
  challengeId Int
  challenge   Challenge  @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  authorId    Int?
  author      User?      @relation(fields: [authorId], references: [id])
  content     String?
  createdAt   DateTime   @default(now())
  type        UpdateType
  images      Image[]    // ‚úÖ Ein Update kann mehrere Bilder haben
}


enum UpdateType {
  CREATED
  UPDATED
  DELETED
}
